{"name":"to_spreadsheet","tagline":"Render XLSX from Rails using existing views (html ⇒ xlsx)","body":"to_spreadsheet is a gem that lets you render xls from your existing slim/haml/erb/etc views from Rails (&gt;= 3.0). ![Build Status](https://secure.travis-ci.org/glebm/to_spreadsheet.png?branch=master \"Build Status\"):http://travis-ci.org/glebm/to_spreadsheet\r\n\r\nInstallation\r\n------------\r\n\r\nAdd it to your Gemfile:\r\n```ruby\r\ngem 'to_spreadsheet'\r\n```\r\n\r\nUsage\r\n-----\r\n\r\nIn the controller:\r\n```ruby\r\n# my_thingies_controller.rb\r\nclass MyThingiesController < ApplicationController\r\n  respond_to :xls, :html\r\n  def index\r\n    @my_items = MyItem.all\r\n    respond_to do |format|\r\n      format.html \r\n      format.xlsx { render xlsx: :index, filename: \"my_items_doc\" }\r\n    end\r\n  end\r\nend\r\n```\r\n\r\nIn the view partial:\r\n```haml\r\n# _my_items.haml\r\n%table\r\n  %caption My items\r\n  %thead\r\n    %tr\r\n      %td ID\r\n      %td Name\r\n  %tbody\r\n    - my_items.each do |my_item|\r\n      %tr\r\n        %td.number= my_item.id\r\n        %td= my_item.name\r\n  %tfoot\r\n    %tr\r\n      %td(colspan=\"2\") #{my_items.length}\r\n```\r\n\r\nIn the XLSX view:\r\n```haml\r\n# index.xls.haml\r\n= render 'my_items', my_items: @my_items\r\n```\r\n\r\nIn the HTML view:\r\n```haml\r\n# index.html.haml\r\n= link_to 'Download spreadsheet', my_items_url(format: :xlsx)\r\n= render 'my_items', my_items: @my_items\r\n```\r\n\r\n### Worksheets\r\n\r\nEvery table in the view will be converted to a separate sheet.\r\nThe sheet title will be assigned to the value of the table’s caption element if it exists.\r\n\r\n### Formatting\r\n\r\nYou can define formats in your view file (local to the view) or in the initializer\r\n\r\n```ruby\r\nformat_xls 'table.my-table' do\r\n  workbook use_autowidth: true\r\n  sheet    orientation: landscape\r\n  format 'th', b: true # bold\r\n  format 'tbody tr', bg_color: lambda { |row| 'ddffdd' if row.index.odd? }\r\n  format 'A3:B10', i: true # italic\r\n  format column: 0, width: 35\r\n  format 'td.custom', lambda { |cell| modify cell somehow.}\r\n  # default value (fallback value when value is blank or 0 for integer / float)\r\n  default 'td.price', 10\r\nend\r\n```\r\n\r\nFor the full list of supported properties head here: http://rubydoc.info/github/randym/axlsx/Axlsx/Styles#add_style-instance_method\r\nIn addition, for column formats, Axlsx columnInfo properties are also supported\r\n\r\n### Advanced formatting\r\n\r\nto_spreadsheet [associates](https://github.com/glebm/to_spreadsheet/blob/master/lib/to_spreadsheet/renderer.rb#L33) HTML nodes with Axlsx objects as follows:\r\n\r\n| HTML tag | Axlsx object |\r\n|----------|--------------|\r\n| table    | worksheet    |\r\n| tr       | row          |\r\n| td, th   | cell         |\r\n\r\nFor example, to directly manipulate a worksheet:\r\n```ruby\r\nformat_xls do\r\n  format 'table' do |worksheet|\r\n    worksheet.add_chart ...\r\n    # to get the associated Nokogiri node:\r\n    el = context.to_xml_node(worksheet)\r\n  end\r\nend\r\n```\r\n\r\n### Themes\r\n\r\nYou can define themes, i.e. blocks of formatting code:\r\n```ruby\r\nToSpreadsheet.theme :zebra do\r\n  format 'tr', bg_color: lambda { |row| 'ddffdd' if row.index.odd? }\r\nend\r\n```\r\n\r\nAnd then use them:\r\n```ruby\r\nformat_xls 'table.zebra', ToSpreadsheet.theme(:zebra)\r\n```\r\n\r\n### Types\r\n\r\nThe default theme uses class names on td/th to cast values.\r\nHere is the list of class to type mapping:\r\n\r\n| CSS class        | Format                   |\r\n|------------------|--------------------------|\r\n| decimal or float | Decimal                  |\r\n| num or int       | Integer                  |\r\n| datetime         | DateTime (Chronic.parse) |\r\n| date             | Date (Date.parse)        |\r\n| time             | Time (Chronic.parse)     |\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}